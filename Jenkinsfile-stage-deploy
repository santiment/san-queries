podTemplate(label: 'sanqueries-staging-deploy', containers: [
    containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.23.14', command: 'cat', ttyEnabled: true),
    containerTemplate(name: 'docker', image: 'docker', ttyEnabled: true, command: 'cat', envVars: [
        envVar(key: 'DOCKER_HOST', value: 'tcp://docker-host-docker-host.default.svc.cluster.local:2375')
      ]),
    containerTemplate(name: 'awscli', image: 'mikesir87/aws-cli', ttyEnabled: true, command: 'cat', envVars: [
      envVar(key: 'AWS_DEFAULT_REGION', value: 'eu-central-1'),
      secretEnvVar(key: 'AWS_ACCESS_KEY_ID', secretName: 'ecr-keys-env', secretKey: 'awsAccessKeyId'),
      secretEnvVar(key: 'AWS_SECRET_ACCESS_KEY', secretName: 'ecr-keys-env', secretKey: 'awsSecretAccessKey'),
    ])
  ]) {
  node('sanqueries-staging-deploy') {
    stage('Update deployment') {
      def scmVars = checkout scm

      withCredentials([
          string(
            credentialsId: 'aws_account_id',
            variable: 'aws_account_id'
          )
        ]){
        
        def awsRegistry = "${env.aws_account_id}.dkr.ecr.eu-central-1.amazonaws.com"
        def sourceImage = "${awsRegistry}/san-queries"
        def taggedSource = "${sourceImage}:stage"

        /* Check if ECR image exists */

        container('awscli') {
          def ecrimagecheck = sh(returnStatus:true, returnStdout: false, script: "aws ecr describe-images --repository-name san-queries --image-ids imageTag=stage" )
          if (ecrimagecheck != 0) {
            currentBuild.result = 'FAILED'
            error 'Missing imageId ${taggedSource} in ECR repository'
          }
        }

        /* Deploy the image */

        container('kubectl') {
          sh "kubectl version"
          sh "kubectl rollout restart deployment/san-queries -n default"
        }
      }
    }
  }
}

